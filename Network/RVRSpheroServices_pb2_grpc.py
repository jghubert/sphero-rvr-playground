# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Accelerometer_pb2 as Accelerometer__pb2
import AmbientLight_pb2 as AmbientLight__pb2
import ColorSensor_pb2 as ColorSensor__pb2
import CoreTime_pb2 as CoreTime__pb2
import Gyroscope_pb2 as Gyroscope__pb2
import IMU_pb2 as IMU__pb2
import Locator_pb2 as Locator__pb2
import Quaternion_pb2 as Quaternion__pb2
import Speed_pb2 as Speed__pb2
import Velocity_pb2 as Velocity__pb2


class RVRSpheroServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAccelerometer = channel.unary_unary(
                '/RVRSpheroService/GetAccelerometer',
                request_serializer=Accelerometer__pb2.AccelerometerRequest.SerializeToString,
                response_deserializer=Accelerometer__pb2.Accelerometer.FromString,
                )
        self.GetAmbientLight = channel.unary_unary(
                '/RVRSpheroService/GetAmbientLight',
                request_serializer=AmbientLight__pb2.AmbientLightRequest.SerializeToString,
                response_deserializer=AmbientLight__pb2.AmbientLight.FromString,
                )
        self.GetColorSensor = channel.unary_unary(
                '/RVRSpheroService/GetColorSensor',
                request_serializer=ColorSensor__pb2.ColorSensorRequest.SerializeToString,
                response_deserializer=ColorSensor__pb2.ColorSensor.FromString,
                )
        self.GetCoreTime = channel.unary_unary(
                '/RVRSpheroService/GetCoreTime',
                request_serializer=CoreTime__pb2.CoreTimeRequest.SerializeToString,
                response_deserializer=CoreTime__pb2.CoreTime.FromString,
                )
        self.GetGyroscope = channel.unary_unary(
                '/RVRSpheroService/GetGyroscope',
                request_serializer=Gyroscope__pb2.GyroscopeRequest.SerializeToString,
                response_deserializer=Gyroscope__pb2.Gyroscope.FromString,
                )
        self.GetIMU = channel.unary_unary(
                '/RVRSpheroService/GetIMU',
                request_serializer=IMU__pb2.IMURequest.SerializeToString,
                response_deserializer=IMU__pb2.IMU.FromString,
                )
        self.GetLocator = channel.unary_unary(
                '/RVRSpheroService/GetLocator',
                request_serializer=Locator__pb2.LocatorRequest.SerializeToString,
                response_deserializer=Locator__pb2.Locator.FromString,
                )
        self.GetQuaternion = channel.unary_unary(
                '/RVRSpheroService/GetQuaternion',
                request_serializer=Quaternion__pb2.QuaternionRequest.SerializeToString,
                response_deserializer=Quaternion__pb2.Quaternion.FromString,
                )
        self.GetSpeed = channel.unary_unary(
                '/RVRSpheroService/GetSpeed',
                request_serializer=Speed__pb2.SpeedRequest.SerializeToString,
                response_deserializer=Speed__pb2.Speed.FromString,
                )
        self.GetVelocity = channel.unary_unary(
                '/RVRSpheroService/GetVelocity',
                request_serializer=Velocity__pb2.VelocityRequest.SerializeToString,
                response_deserializer=Velocity__pb2.Velocity.FromString,
                )


class RVRSpheroServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAccelerometer(self, request, context):
        """Data Retrieval
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAmbientLight(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetColorSensor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCoreTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGyroscope(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIMU(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLocator(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQuaternion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSpeed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVelocity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RVRSpheroServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAccelerometer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAccelerometer,
                    request_deserializer=Accelerometer__pb2.AccelerometerRequest.FromString,
                    response_serializer=Accelerometer__pb2.Accelerometer.SerializeToString,
            ),
            'GetAmbientLight': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAmbientLight,
                    request_deserializer=AmbientLight__pb2.AmbientLightRequest.FromString,
                    response_serializer=AmbientLight__pb2.AmbientLight.SerializeToString,
            ),
            'GetColorSensor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetColorSensor,
                    request_deserializer=ColorSensor__pb2.ColorSensorRequest.FromString,
                    response_serializer=ColorSensor__pb2.ColorSensor.SerializeToString,
            ),
            'GetCoreTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCoreTime,
                    request_deserializer=CoreTime__pb2.CoreTimeRequest.FromString,
                    response_serializer=CoreTime__pb2.CoreTime.SerializeToString,
            ),
            'GetGyroscope': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGyroscope,
                    request_deserializer=Gyroscope__pb2.GyroscopeRequest.FromString,
                    response_serializer=Gyroscope__pb2.Gyroscope.SerializeToString,
            ),
            'GetIMU': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIMU,
                    request_deserializer=IMU__pb2.IMURequest.FromString,
                    response_serializer=IMU__pb2.IMU.SerializeToString,
            ),
            'GetLocator': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLocator,
                    request_deserializer=Locator__pb2.LocatorRequest.FromString,
                    response_serializer=Locator__pb2.Locator.SerializeToString,
            ),
            'GetQuaternion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuaternion,
                    request_deserializer=Quaternion__pb2.QuaternionRequest.FromString,
                    response_serializer=Quaternion__pb2.Quaternion.SerializeToString,
            ),
            'GetSpeed': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSpeed,
                    request_deserializer=Speed__pb2.SpeedRequest.FromString,
                    response_serializer=Speed__pb2.Speed.SerializeToString,
            ),
            'GetVelocity': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVelocity,
                    request_deserializer=Velocity__pb2.VelocityRequest.FromString,
                    response_serializer=Velocity__pb2.Velocity.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RVRSpheroService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RVRSpheroService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAccelerometer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RVRSpheroService/GetAccelerometer',
            Accelerometer__pb2.AccelerometerRequest.SerializeToString,
            Accelerometer__pb2.Accelerometer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAmbientLight(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RVRSpheroService/GetAmbientLight',
            AmbientLight__pb2.AmbientLightRequest.SerializeToString,
            AmbientLight__pb2.AmbientLight.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetColorSensor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RVRSpheroService/GetColorSensor',
            ColorSensor__pb2.ColorSensorRequest.SerializeToString,
            ColorSensor__pb2.ColorSensor.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCoreTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RVRSpheroService/GetCoreTime',
            CoreTime__pb2.CoreTimeRequest.SerializeToString,
            CoreTime__pb2.CoreTime.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGyroscope(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RVRSpheroService/GetGyroscope',
            Gyroscope__pb2.GyroscopeRequest.SerializeToString,
            Gyroscope__pb2.Gyroscope.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIMU(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RVRSpheroService/GetIMU',
            IMU__pb2.IMURequest.SerializeToString,
            IMU__pb2.IMU.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLocator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RVRSpheroService/GetLocator',
            Locator__pb2.LocatorRequest.SerializeToString,
            Locator__pb2.Locator.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetQuaternion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RVRSpheroService/GetQuaternion',
            Quaternion__pb2.QuaternionRequest.SerializeToString,
            Quaternion__pb2.Quaternion.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSpeed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RVRSpheroService/GetSpeed',
            Speed__pb2.SpeedRequest.SerializeToString,
            Speed__pb2.Speed.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVelocity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RVRSpheroService/GetVelocity',
            Velocity__pb2.VelocityRequest.SerializeToString,
            Velocity__pb2.Velocity.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
